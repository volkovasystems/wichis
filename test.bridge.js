"use strict";var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require("babel-runtime/helpers/createClass");var _createClass3 = _interopRequireDefault(_createClass2);var _for = require("babel-runtime/core-js/symbol/for");var _for2 = _interopRequireDefault(_for);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var assert = require("assert");
var wichis = require("./wichis.js");

assert.equal(wichis(false, true), true, "should return true");

assert.equal(wichis(1, "hello", true), 1, "should return 1");

assert.equal(wichis("", "yeah", {}), "yeah", "should return value 'yeah'");

var test = function hello() {};
assert.deepEqual(wichis(false, (0, _for2.default)("id"), test), test, "should return function hello( ){ }");

assert.deepEqual(wichis((0, _for2.default)("cloaked"), {}, true), (0, _for2.default)("cloaked"), "should return Symbol.for( 'cloaked' )");

assert.equal(wichis("", Infinity, true), Infinity, "should return Infinity");

assert.deepEqual(wichis("", false, arguments), arguments, "should return arguments");

var test4 = function hello() {return "hello";};
assert.deepEqual(wichis(test4,
function procedure() {throw new Error("no operation");}),
test4, "should return function hello( ){ return 'hello' }");

assert.deepEqual(wichis(false, [], [1, 2, 3]), [1, 2, 3], "should return [ 1, 2, 3 ]");

assert.deepEqual(wichis({}, []), [], "should return [ ]");

assert.deepEqual(wichis({}, ["hello"], { "hello": "world" }), ["hello"], "should return [ 'hello' ]");

assert.deepEqual(wichis(0, {}, []), [], "should return [ ]");

assert.equal(wichis(0, {}, true), true, "should return boolean true");

assert.equal(wichis(null, undefined, NaN.toString(), true), NaN.toString(), "should return value of NaN.toString( )");var

ClassA = function () {
	function ClassA() {(0, _classCallCheck3.default)(this, ClassA);}(0, _createClass3.default)(ClassA, [{ key: "method", value: function method()
		{return "hello";} }]);return ClassA;}();


var testA = new ClassA();
assert.deepEqual(wichis({}, testA), testA, "should return value of testA variable");

assert.deepEqual(wichis(testA, {}), {}, "should return { }");

console.log("ok");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuYnJpZGdlLmpzIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJ3aWNoaXMiLCJlcXVhbCIsInRlc3QiLCJoZWxsbyIsImRlZXBFcXVhbCIsIkluZmluaXR5IiwiYXJndW1lbnRzIiwidGVzdDQiLCJwcm9jZWR1cmUiLCJFcnJvciIsInVuZGVmaW5lZCIsIk5hTiIsInRvU3RyaW5nIiwiQ2xhc3NBIiwidGVzdEEiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiNGNBQUEsSUFBTUEsU0FBU0MsUUFBUyxRQUFULENBQWY7QUFDQSxJQUFNQyxTQUFTRCxRQUFTLGFBQVQsQ0FBZjs7QUFFQUQsT0FBT0csS0FBUCxDQUFjRCxPQUFRLEtBQVIsRUFBZSxJQUFmLENBQWQsRUFBcUMsSUFBckMsRUFBMkMsb0JBQTNDOztBQUVBRixPQUFPRyxLQUFQLENBQWNELE9BQVEsQ0FBUixFQUFXLE9BQVgsRUFBb0IsSUFBcEIsQ0FBZCxFQUEwQyxDQUExQyxFQUE2QyxpQkFBN0M7O0FBRUFGLE9BQU9HLEtBQVAsQ0FBY0QsT0FBUSxFQUFSLEVBQVksTUFBWixFQUFvQixFQUFwQixDQUFkLEVBQXlDLE1BQXpDLEVBQWlELDRCQUFqRDs7QUFFQSxJQUFJRSxPQUFPLFNBQVNDLEtBQVQsR0FBaUIsQ0FBRyxDQUEvQjtBQUNBTCxPQUFPTSxTQUFQLENBQWtCSixPQUFRLEtBQVIsRUFBZSxtQkFBWSxJQUFaLENBQWYsRUFBbUNFLElBQW5DLENBQWxCLEVBQTZEQSxJQUE3RCxFQUFtRSxvQ0FBbkU7O0FBRUFKLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsbUJBQVksU0FBWixDQUFSLEVBQWlDLEVBQWpDLEVBQXNDLElBQXRDLENBQWxCLEVBQWdFLG1CQUFZLFNBQVosQ0FBaEUsRUFBeUYsdUNBQXpGOztBQUVBRixPQUFPRyxLQUFQLENBQWNELE9BQVEsRUFBUixFQUFZSyxRQUFaLEVBQXNCLElBQXRCLENBQWQsRUFBNENBLFFBQTVDLEVBQXNELHdCQUF0RDs7QUFFQVAsT0FBT00sU0FBUCxDQUFrQkosT0FBUSxFQUFSLEVBQVksS0FBWixFQUFtQk0sU0FBbkIsQ0FBbEIsRUFBa0RBLFNBQWxELEVBQTZELHlCQUE3RDs7QUFFQSxJQUFJQyxRQUFRLFNBQVNKLEtBQVQsR0FBaUIsQ0FBRSxPQUFPLE9BQVAsQ0FBZ0IsQ0FBL0M7QUFDQUwsT0FBT00sU0FBUCxDQUFrQkosT0FBUU8sS0FBUjtBQUNiLFNBQVNDLFNBQVQsR0FBcUIsQ0FBRSxNQUFNLElBQUlDLEtBQUosQ0FBVyxjQUFYLENBQU4sQ0FBbUMsQ0FEN0MsQ0FBbEI7QUFFS0YsS0FGTCxFQUVZLG1EQUZaOztBQUlBVCxPQUFPTSxTQUFQLENBQWtCSixPQUFRLEtBQVIsRUFBZSxFQUFmLEVBQW9CLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQXBCLENBQWxCLEVBQXFELENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSLENBQXJELEVBQWtFLDJCQUFsRTs7QUFFQUYsT0FBT00sU0FBUCxDQUFrQkosT0FBUSxFQUFSLEVBQWEsRUFBYixDQUFsQixFQUFzQyxFQUF0QyxFQUEyQyxtQkFBM0M7O0FBRUFGLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsRUFBUixFQUFhLENBQUUsT0FBRixDQUFiLEVBQTBCLEVBQUUsU0FBUyxPQUFYLEVBQTFCLENBQWxCLEVBQW9FLENBQUUsT0FBRixDQUFwRSxFQUFpRiwyQkFBakY7O0FBRUFGLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsQ0FBUixFQUFXLEVBQVgsRUFBZ0IsRUFBaEIsQ0FBbEIsRUFBeUMsRUFBekMsRUFBOEMsbUJBQTlDOztBQUVBRixPQUFPRyxLQUFQLENBQWNELE9BQVEsQ0FBUixFQUFXLEVBQVgsRUFBZ0IsSUFBaEIsQ0FBZCxFQUFzQyxJQUF0QyxFQUE0Qyw0QkFBNUM7O0FBRUFGLE9BQU9HLEtBQVAsQ0FBY0QsT0FBUSxJQUFSLEVBQWNVLFNBQWQsRUFBeUJDLElBQUlDLFFBQUosRUFBekIsRUFBMEMsSUFBMUMsQ0FBZCxFQUFnRUQsSUFBSUMsUUFBSixFQUFoRSxFQUFpRix3Q0FBakYsRTs7QUFFTUMsTTtBQUNMLG1CQUFjLDZDQUFHLEM7QUFDUixHQUFFLE9BQU8sT0FBUCxDQUFpQixDOzs7QUFHN0IsSUFBSUMsUUFBUSxJQUFJRCxNQUFKLEVBQVo7QUFDQWYsT0FBT00sU0FBUCxDQUFrQkosT0FBUSxFQUFSLEVBQWFjLEtBQWIsQ0FBbEIsRUFBd0NBLEtBQXhDLEVBQStDLHVDQUEvQzs7QUFFQWhCLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVFjLEtBQVIsRUFBZSxFQUFmLENBQWxCLEVBQXdDLEVBQXhDLEVBQTZDLG1CQUE3Qzs7QUFFQUMsUUFBUUMsR0FBUixDQUFhLElBQWIiLCJmaWxlIjoidGVzdC5icmlkZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3NlcnQgPSByZXF1aXJlKCBcImFzc2VydFwiICk7XHJcbmNvbnN0IHdpY2hpcyA9IHJlcXVpcmUoIFwiLi93aWNoaXMuanNcIiApO1xyXG5cclxuYXNzZXJ0LmVxdWFsKCB3aWNoaXMoIGZhbHNlLCB0cnVlICksIHRydWUsIFwic2hvdWxkIHJldHVybiB0cnVlXCIgKTtcclxuXHJcbmFzc2VydC5lcXVhbCggd2ljaGlzKCAxLCBcImhlbGxvXCIsIHRydWUgKSwgMSwgXCJzaG91bGQgcmV0dXJuIDFcIiApO1xyXG5cclxuYXNzZXJ0LmVxdWFsKCB3aWNoaXMoIFwiXCIsIFwieWVhaFwiLCB7IH0gKSwgXCJ5ZWFoXCIsIFwic2hvdWxkIHJldHVybiB2YWx1ZSAneWVhaCdcIiApO1xyXG5cclxubGV0IHRlc3QgPSBmdW5jdGlvbiBoZWxsbyggKXsgfTtcclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCBmYWxzZSwgU3ltYm9sLmZvciggXCJpZFwiICksIHRlc3QgKSwgdGVzdCwgXCJzaG91bGQgcmV0dXJuIGZ1bmN0aW9uIGhlbGxvKCApeyB9XCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggU3ltYm9sLmZvciggXCJjbG9ha2VkXCIgKSwgeyB9LCB0cnVlICksIFN5bWJvbC5mb3IoIFwiY2xvYWtlZFwiICksIFwic2hvdWxkIHJldHVybiBTeW1ib2wuZm9yKCAnY2xvYWtlZCcgKVwiICk7XHJcblxyXG5hc3NlcnQuZXF1YWwoIHdpY2hpcyggXCJcIiwgSW5maW5pdHksIHRydWUgKSwgSW5maW5pdHksIFwic2hvdWxkIHJldHVybiBJbmZpbml0eVwiICk7XHJcblxyXG5hc3NlcnQuZGVlcEVxdWFsKCB3aWNoaXMoIFwiXCIsIGZhbHNlLCBhcmd1bWVudHMgKSwgYXJndW1lbnRzLCBcInNob3VsZCByZXR1cm4gYXJndW1lbnRzXCIgKTtcclxuXHJcbmxldCB0ZXN0NCA9IGZ1bmN0aW9uIGhlbGxvKCApeyByZXR1cm4gXCJoZWxsb1wiIH07XHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggdGVzdDQsXHJcblx0XHRcdFx0XHRmdW5jdGlvbiBwcm9jZWR1cmUoICl7IHRocm93IG5ldyBFcnJvciggXCJubyBvcGVyYXRpb25cIiApIH0gKSxcclxuXHRcdFx0XHRcdHRlc3Q0LCBcInNob3VsZCByZXR1cm4gZnVuY3Rpb24gaGVsbG8oICl7IHJldHVybiAnaGVsbG8nIH1cIiApO1xyXG5cclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCBmYWxzZSwgWyBdLCBbIDEsIDIsIDMgXSApLCBbIDEsIDIsIDMgXSwgXCJzaG91bGQgcmV0dXJuIFsgMSwgMiwgMyBdXCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggeyB9LCBbIF0gKSwgWyBdLCBcInNob3VsZCByZXR1cm4gWyBdXCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggeyB9LCBbIFwiaGVsbG9cIiBdLCB7IFwiaGVsbG9cIjogXCJ3b3JsZFwiIH0gKSwgWyBcImhlbGxvXCIgXSwgXCJzaG91bGQgcmV0dXJuIFsgJ2hlbGxvJyBdXCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggMCwgeyB9LCBbIF0gKSwgWyBdLCBcInNob3VsZCByZXR1cm4gWyBdXCIgKTtcclxuXHJcbmFzc2VydC5lcXVhbCggd2ljaGlzKCAwLCB7IH0sIHRydWUgKSwgdHJ1ZSwgXCJzaG91bGQgcmV0dXJuIGJvb2xlYW4gdHJ1ZVwiICk7XHJcblxyXG5hc3NlcnQuZXF1YWwoIHdpY2hpcyggbnVsbCwgdW5kZWZpbmVkLCBOYU4udG9TdHJpbmcoICksIHRydWUgKSwgTmFOLnRvU3RyaW5nKCApLCBcInNob3VsZCByZXR1cm4gdmFsdWUgb2YgTmFOLnRvU3RyaW5nKCApXCIgKTtcclxuXHJcbmNsYXNzIENsYXNzQXtcclxuXHRjb25zdHJ1Y3RvciggKXsgfVxyXG5cdG1ldGhvZCggKXsgcmV0dXJuIFwiaGVsbG9cIjsgfVxyXG59XHJcblxyXG5sZXQgdGVzdEEgPSBuZXcgQ2xhc3NBKCApO1xyXG5hc3NlcnQuZGVlcEVxdWFsKCB3aWNoaXMoIHsgfSwgdGVzdEEgKSwgdGVzdEEsIFwic2hvdWxkIHJldHVybiB2YWx1ZSBvZiB0ZXN0QSB2YXJpYWJsZVwiICk7XHJcblxyXG5hc3NlcnQuZGVlcEVxdWFsKCB3aWNoaXMoIHRlc3RBLCB7IH0gKSwgeyB9LCBcInNob3VsZCByZXR1cm4geyB9XCIgKTtcclxuXHJcbmNvbnNvbGUubG9nKCBcIm9rXCIgKTtcclxuIl19
//# sourceMappingURL=test.bridge.js.map

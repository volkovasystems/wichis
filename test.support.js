"use strict";var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require("babel-runtime/helpers/createClass");var _createClass3 = _interopRequireDefault(_createClass2);var _for = require("babel-runtime/core-js/symbol/for");var _for2 = _interopRequireDefault(_for);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var assert = require("assert");
var wichis = require("./wichis.js");

assert.equal(wichis(false, true), true, "should return true");

assert.equal(wichis(1, "hello", true), 1, "should return 1");

assert.equal(wichis("", "yeah", {}), "yeah", "should return value 'yeah'");

var test = function hello() {};
assert.deepEqual(wichis(false, (0, _for2.default)("id"), test), test, "should return function hello( ){ }");

assert.deepEqual(wichis((0, _for2.default)("cloaked"), {}, true), (0, _for2.default)("cloaked"), "should return Symbol.for( 'cloaked' )");

assert.equal(wichis("", Infinity, true), Infinity, "should return Infinity");

assert.deepEqual(wichis("", false, arguments), arguments, "should return arguments");

var test4 = function hello() {return "hello";};
assert.deepEqual(wichis(test4,
function procedure() {throw new Error("no operation");}),
test4, "should return function hello( ){ return 'hello' }");

assert.deepEqual(wichis(false, [], [1, 2, 3]), [1, 2, 3], "should return [ 1, 2, 3 ]");

assert.deepEqual(wichis({}, []), [], "should return [ ]");

assert.deepEqual(wichis({}, ["hello"], { "hello": "world" }), ["hello"], "should return [ 'hello' ]");

assert.deepEqual(wichis(0, {}, []), [], "should return [ ]");

assert.equal(wichis(0, {}, true), true, "should return boolean true");

assert.equal(wichis(null, undefined, NaN.toString(), true), NaN.toString(), "should return value of NaN.toString( )");var

ClassA = function () {
	function ClassA() {(0, _classCallCheck3.default)(this, ClassA);}(0, _createClass3.default)(ClassA, [{ key: "method", value: function method()
		{return "hello";} }]);return ClassA;}();


var testA = new ClassA();
assert.deepEqual(wichis({}, testA), testA, "should return value of testA variable");

assert.deepEqual(wichis(testA, {}), {}, "should return { }");

console.log("ok");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Quc3VwcG9ydC5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwid2ljaGlzIiwiZXF1YWwiLCJ0ZXN0IiwiaGVsbG8iLCJkZWVwRXF1YWwiLCJJbmZpbml0eSIsImFyZ3VtZW50cyIsInRlc3Q0IiwicHJvY2VkdXJlIiwiRXJyb3IiLCJ1bmRlZmluZWQiLCJOYU4iLCJ0b1N0cmluZyIsIkNsYXNzQSIsInRlc3RBIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IjRjQUFBLElBQU1BLFNBQVNDLFFBQVMsUUFBVCxDQUFmO0FBQ0EsSUFBTUMsU0FBU0QsUUFBUyxhQUFULENBQWY7O0FBRUFELE9BQU9HLEtBQVAsQ0FBY0QsT0FBUSxLQUFSLEVBQWUsSUFBZixDQUFkLEVBQXFDLElBQXJDLEVBQTJDLG9CQUEzQzs7QUFFQUYsT0FBT0csS0FBUCxDQUFjRCxPQUFRLENBQVIsRUFBVyxPQUFYLEVBQW9CLElBQXBCLENBQWQsRUFBMEMsQ0FBMUMsRUFBNkMsaUJBQTdDOztBQUVBRixPQUFPRyxLQUFQLENBQWNELE9BQVEsRUFBUixFQUFZLE1BQVosRUFBb0IsRUFBcEIsQ0FBZCxFQUF5QyxNQUF6QyxFQUFpRCw0QkFBakQ7O0FBRUEsSUFBSUUsT0FBTyxTQUFTQyxLQUFULEdBQWlCLENBQUcsQ0FBL0I7QUFDQUwsT0FBT00sU0FBUCxDQUFrQkosT0FBUSxLQUFSLEVBQWUsbUJBQVksSUFBWixDQUFmLEVBQW1DRSxJQUFuQyxDQUFsQixFQUE2REEsSUFBN0QsRUFBbUUsb0NBQW5FOztBQUVBSixPQUFPTSxTQUFQLENBQWtCSixPQUFRLG1CQUFZLFNBQVosQ0FBUixFQUFpQyxFQUFqQyxFQUFzQyxJQUF0QyxDQUFsQixFQUFnRSxtQkFBWSxTQUFaLENBQWhFLEVBQXlGLHVDQUF6Rjs7QUFFQUYsT0FBT0csS0FBUCxDQUFjRCxPQUFRLEVBQVIsRUFBWUssUUFBWixFQUFzQixJQUF0QixDQUFkLEVBQTRDQSxRQUE1QyxFQUFzRCx3QkFBdEQ7O0FBRUFQLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsRUFBUixFQUFZLEtBQVosRUFBbUJNLFNBQW5CLENBQWxCLEVBQWtEQSxTQUFsRCxFQUE2RCx5QkFBN0Q7O0FBRUEsSUFBSUMsUUFBUSxTQUFTSixLQUFULEdBQWlCLENBQUUsT0FBTyxPQUFQLENBQWdCLENBQS9DO0FBQ0FMLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVFPLEtBQVI7QUFDYixTQUFTQyxTQUFULEdBQXFCLENBQUUsTUFBTSxJQUFJQyxLQUFKLENBQVcsY0FBWCxDQUFOLENBQW1DLENBRDdDLENBQWxCO0FBRUtGLEtBRkwsRUFFWSxtREFGWjs7QUFJQVQsT0FBT00sU0FBUCxDQUFrQkosT0FBUSxLQUFSLEVBQWUsRUFBZixFQUFvQixDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUFwQixDQUFsQixFQUFxRCxDQUFFLENBQUYsRUFBSyxDQUFMLEVBQVEsQ0FBUixDQUFyRCxFQUFrRSwyQkFBbEU7O0FBRUFGLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsRUFBUixFQUFhLEVBQWIsQ0FBbEIsRUFBc0MsRUFBdEMsRUFBMkMsbUJBQTNDOztBQUVBRixPQUFPTSxTQUFQLENBQWtCSixPQUFRLEVBQVIsRUFBYSxDQUFFLE9BQUYsQ0FBYixFQUEwQixFQUFFLFNBQVMsT0FBWCxFQUExQixDQUFsQixFQUFvRSxDQUFFLE9BQUYsQ0FBcEUsRUFBaUYsMkJBQWpGOztBQUVBRixPQUFPTSxTQUFQLENBQWtCSixPQUFRLENBQVIsRUFBVyxFQUFYLEVBQWdCLEVBQWhCLENBQWxCLEVBQXlDLEVBQXpDLEVBQThDLG1CQUE5Qzs7QUFFQUYsT0FBT0csS0FBUCxDQUFjRCxPQUFRLENBQVIsRUFBVyxFQUFYLEVBQWdCLElBQWhCLENBQWQsRUFBc0MsSUFBdEMsRUFBNEMsNEJBQTVDOztBQUVBRixPQUFPRyxLQUFQLENBQWNELE9BQVEsSUFBUixFQUFjVSxTQUFkLEVBQXlCQyxJQUFJQyxRQUFKLEVBQXpCLEVBQTBDLElBQTFDLENBQWQsRUFBZ0VELElBQUlDLFFBQUosRUFBaEUsRUFBaUYsd0NBQWpGLEU7O0FBRU1DLE07QUFDTCxtQkFBYyw2Q0FBRyxDO0FBQ1IsR0FBRSxPQUFPLE9BQVAsQ0FBaUIsQzs7O0FBRzdCLElBQUlDLFFBQVEsSUFBSUQsTUFBSixFQUFaO0FBQ0FmLE9BQU9NLFNBQVAsQ0FBa0JKLE9BQVEsRUFBUixFQUFhYyxLQUFiLENBQWxCLEVBQXdDQSxLQUF4QyxFQUErQyx1Q0FBL0M7O0FBRUFoQixPQUFPTSxTQUFQLENBQWtCSixPQUFRYyxLQUFSLEVBQWUsRUFBZixDQUFsQixFQUF3QyxFQUF4QyxFQUE2QyxtQkFBN0M7O0FBRUFDLFFBQVFDLEdBQVIsQ0FBYSxJQUFiIiwiZmlsZSI6InRlc3Quc3VwcG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoIFwiYXNzZXJ0XCIgKTtcclxuY29uc3Qgd2ljaGlzID0gcmVxdWlyZSggXCIuL3dpY2hpcy5qc1wiICk7XHJcblxyXG5hc3NlcnQuZXF1YWwoIHdpY2hpcyggZmFsc2UsIHRydWUgKSwgdHJ1ZSwgXCJzaG91bGQgcmV0dXJuIHRydWVcIiApO1xyXG5cclxuYXNzZXJ0LmVxdWFsKCB3aWNoaXMoIDEsIFwiaGVsbG9cIiwgdHJ1ZSApLCAxLCBcInNob3VsZCByZXR1cm4gMVwiICk7XHJcblxyXG5hc3NlcnQuZXF1YWwoIHdpY2hpcyggXCJcIiwgXCJ5ZWFoXCIsIHsgfSApLCBcInllYWhcIiwgXCJzaG91bGQgcmV0dXJuIHZhbHVlICd5ZWFoJ1wiICk7XHJcblxyXG5sZXQgdGVzdCA9IGZ1bmN0aW9uIGhlbGxvKCApeyB9O1xyXG5hc3NlcnQuZGVlcEVxdWFsKCB3aWNoaXMoIGZhbHNlLCBTeW1ib2wuZm9yKCBcImlkXCIgKSwgdGVzdCApLCB0ZXN0LCBcInNob3VsZCByZXR1cm4gZnVuY3Rpb24gaGVsbG8oICl7IH1cIiApO1xyXG5cclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCBTeW1ib2wuZm9yKCBcImNsb2FrZWRcIiApLCB7IH0sIHRydWUgKSwgU3ltYm9sLmZvciggXCJjbG9ha2VkXCIgKSwgXCJzaG91bGQgcmV0dXJuIFN5bWJvbC5mb3IoICdjbG9ha2VkJyApXCIgKTtcclxuXHJcbmFzc2VydC5lcXVhbCggd2ljaGlzKCBcIlwiLCBJbmZpbml0eSwgdHJ1ZSApLCBJbmZpbml0eSwgXCJzaG91bGQgcmV0dXJuIEluZmluaXR5XCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggXCJcIiwgZmFsc2UsIGFyZ3VtZW50cyApLCBhcmd1bWVudHMsIFwic2hvdWxkIHJldHVybiBhcmd1bWVudHNcIiApO1xyXG5cclxubGV0IHRlc3Q0ID0gZnVuY3Rpb24gaGVsbG8oICl7IHJldHVybiBcImhlbGxvXCIgfTtcclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCB0ZXN0NCxcclxuXHRcdFx0XHRcdGZ1bmN0aW9uIHByb2NlZHVyZSggKXsgdGhyb3cgbmV3IEVycm9yKCBcIm5vIG9wZXJhdGlvblwiICkgfSApLFxyXG5cdFx0XHRcdFx0dGVzdDQsIFwic2hvdWxkIHJldHVybiBmdW5jdGlvbiBoZWxsbyggKXsgcmV0dXJuICdoZWxsbycgfVwiICk7XHJcblxyXG5hc3NlcnQuZGVlcEVxdWFsKCB3aWNoaXMoIGZhbHNlLCBbIF0sIFsgMSwgMiwgMyBdICksIFsgMSwgMiwgMyBdLCBcInNob3VsZCByZXR1cm4gWyAxLCAyLCAzIF1cIiApO1xyXG5cclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCB7IH0sIFsgXSApLCBbIF0sIFwic2hvdWxkIHJldHVybiBbIF1cIiApO1xyXG5cclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCB7IH0sIFsgXCJoZWxsb1wiIF0sIHsgXCJoZWxsb1wiOiBcIndvcmxkXCIgfSApLCBbIFwiaGVsbG9cIiBdLCBcInNob3VsZCByZXR1cm4gWyAnaGVsbG8nIF1cIiApO1xyXG5cclxuYXNzZXJ0LmRlZXBFcXVhbCggd2ljaGlzKCAwLCB7IH0sIFsgXSApLCBbIF0sIFwic2hvdWxkIHJldHVybiBbIF1cIiApO1xyXG5cclxuYXNzZXJ0LmVxdWFsKCB3aWNoaXMoIDAsIHsgfSwgdHJ1ZSApLCB0cnVlLCBcInNob3VsZCByZXR1cm4gYm9vbGVhbiB0cnVlXCIgKTtcclxuXHJcbmFzc2VydC5lcXVhbCggd2ljaGlzKCBudWxsLCB1bmRlZmluZWQsIE5hTi50b1N0cmluZyggKSwgdHJ1ZSApLCBOYU4udG9TdHJpbmcoICksIFwic2hvdWxkIHJldHVybiB2YWx1ZSBvZiBOYU4udG9TdHJpbmcoIClcIiApO1xyXG5cclxuY2xhc3MgQ2xhc3NBe1xyXG5cdGNvbnN0cnVjdG9yKCApeyB9XHJcblx0bWV0aG9kKCApeyByZXR1cm4gXCJoZWxsb1wiOyB9XHJcbn1cclxuXHJcbmxldCB0ZXN0QSA9IG5ldyBDbGFzc0EoICk7XHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggeyB9LCB0ZXN0QSApLCB0ZXN0QSwgXCJzaG91bGQgcmV0dXJuIHZhbHVlIG9mIHRlc3RBIHZhcmlhYmxlXCIgKTtcclxuXHJcbmFzc2VydC5kZWVwRXF1YWwoIHdpY2hpcyggdGVzdEEsIHsgfSApLCB7IH0sIFwic2hvdWxkIHJldHVybiB7IH1cIiApO1xyXG5cclxuY29uc29sZS5sb2coIFwib2tcIiApO1xyXG4iXX0=
//# sourceMappingURL=test.support.js.map
